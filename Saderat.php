<?php
	
	namespace system\lib;
	
	use function abs;
	use BadMethodCallException;
	use common\models\Transactions;
	use function count;
	use function curl_close;
	use function curl_exec;
	use function curl_init;
	use function curl_setopt;
	use const CURLOPT_POSTFIELDS;
	use const CURLOPT_RETURNTRANSFER;
	use const CURLOPT_SSL_VERIFYPEER;
	use const CURLOPT_URL;
	use function date;
	use function json_decode;
	use SoapClient;
	use system\lib\payments\payir\SendException;
	use Yii;
	use yii\base\Component;
	use yii\web\BadRequestHttpException;
	
	/**
	 * کتابخحانه ی پرداخت بانک صادرات
	 * Class Saderat
	 * @property Transactions $transaction
	 * @property string       $error
	 * @package system\lib
	 */
	class Saderat extends Component {
		private $MID;
		public $error;
		public $transaction;
		
		public function init() {
			$this->MID = Yii::$app->Options->SaderatMID;
			$this->PayError();
			parent::init(); // TODO: Change the autogenerated stub
		}
		
		final public function ready( $amount , $factor , $callback ) {
			
			$price  = $amount;        // Price Rial
			$ResNum = $factor;            // Invoice Number
			
			$RedirectURL = $callback;
			
			return "<form id='samanpeyment' action='https://sep.shaparak.ir/payment.aspx' method='post'>
<input type='hidden' name='Amount' value='{$price}' />
<input type='hidden' name='ResNum' value='{$ResNum}'>
<input type='hidden' name='RedirectURL' value='{$RedirectURL}'/>
<input type='hidden' name='MID' value='{$this->MID}'/>
</form><script>document.forms['samanpeyment'].submit()</script>";

//		$result=$client->RequestToken($MID,$factor,$amount);
//		echo '<pre style="direction:ltr">';
//		var_dump($result);
//		die();
			
			
		}
		
		/**
		 * بانک کاربر را پس از پرداخت یا عدم پرداخت به اصفحه ای که در آن این تابع فراخوانی میشود ریدایرکت میکند.
		 *
		 * @param $transaction Transactions
		 *
		 * @return array
		 * @throws \SoapFault
		 */
		final public function callback() {
			
			if ( ! empty( $_POST ) ) {
				$this->transaction = Transactions::findOne( [ 'factor' => $_POST['ResNum'] ] );
				
				
				
				if ( isset( $_POST['StateCode'] ) && $_POST['State'] == "OK" ) {
//				تراکنش موفق است، حالا باید وریفای شود
					/* < ابتدا از یونیک بودن کد تراکنش اطمینان پیدا میکنیم > */
					{
						$transaction = Transactions::find()->where( [ 'transactionCode' => $_POST['RefNum'] ] )->count();
						if (   $transaction==0 ) {
							/* <  کد تراکنش را در بانک داده ثبت میکنیم > */
							{
								$this->transaction->status          = Transactions::PAY_STATUS_WAIT_FOR_VERIFY;
								$this->transaction->payment_at      = date( 'Y-m-d H:i:s' );
								$this->transaction->description    .= 'پرداخت اولیه در ساعت '.Yii::$app->functions->convertdatetime( date( 'Y-m-d H:i:s')).' انجام شد، در انتظار وریفای -----<br> ';
								$this->transaction->transactionCode = $_POST['RefNum'];
								$this->transaction->save();
							}
							/* </  کد تراکنش را در بانک داده ثبت میکنیم > */
							
							/* < ذخیره ی دیگر پارامتر های ارسالی از بانک > */
							{
								$this->transaction->addObject( 'State' , $_POST['State'] );
								$this->transaction->addObject( 'StateCode' , $_POST['StateCode'] );
								$this->transaction->addObject( 'ResNum' , $_POST['ResNum'] );
								$this->transaction->addObject( 'RefNum' , $_POST['RefNum'] );
								$this->transaction->addObject( 'CID' , $_POST['CID'] );
								$this->transaction->addObject( 'TRACENO' , $_POST['TRACENO'] );
								$this->transaction->addObject( 'RRN' , $_POST['RRN'] );
								$this->transaction->addObject( 'MID' , $_POST['MID'] );
								$this->transaction->addObject( 'Amount' , $_POST['Amount'] );
								$this->transaction->addObject( 'SecurePan' , $_POST['SecurePan'] );
							}
							/* </ ذخیره ی دیگر پارامتر های ارسالی از بانک > */
						}
					}
					/* </ ابتدا از یونیک بودن کد تراکنش اطمینان پیدا میکنیم > */
					
					return $this->verify();
					
				} else {
					// Transaction Failed
					/* < ثبت خطای پیش آمده در تراکنش > */
					{
						$this->transaction->status          = Transactions::PAY_STATUS_FAILED;
						$this->transaction->description     .= 'خطا در پرداخت در ساعت: '.Yii::$app->functions->convertdatetime( date( 'Y-m-d H:i:s')).' با متن خطای :'.$this->error.' -----<br> ';
						$this->transaction->transactionCode = $_POST['RefNum'];
						$this->transaction->save();
						
						
					}
					/* </ ثبت خطای پیش آمده در تراکنش > */
					$this->error.='<p>کد رهگیری شما جهت تماس با پشتیبانی : '.$this->transaction->factor.'</p>';
					return [ 'status' => 0 , 'message' => $this->error ];
				}
			}
			
		}
		
		/**
		 * این تابع بررسی میکند آیا در فرایند خرید خطایی پیش آمده است یا نه،
		 *
		 * به فراخور خطایی که پیش آمده است، پراپرتی error را پر میکند
		 */
		final private function PayError() {
			if (!empty( $_POST)){
				
				switch ( (string) abs( $_POST['StateCode'] ) ) {
					case '8':
					case '16':
//					تراکنش موفق است
						break;
					case '1':
						$this->error = 'صادر کننده از انجام تراکنش صرف نظر کرد';
						break;
					case '3':
						$this->error = 'پذیرنده ی فروشگاهی نامعتبر است';
						break;
					case '5':
						$this->error = 'از انجام تراکنش صرف نظر شد';
						break;
					case '12':
						$this->error = 'تراکنش نامعتبر است';
						break;
					case '14':
						$this->error = 'کارت عابر بانک معتبر نیست';
						break;
					case '15':
						$this->error = 'صادر کننده ی کارت وجود ندارد';
						break;
					case '19':
						$this->error = 'تراکنش مجددا ارسال شود';
						break;
					case '23':
						$this->error = 'کارمزد ارسالی پذیرنده غیر قابل قبول است';
						break;
					case '30':
						$this->error = 'قالب پیام دارای ایراد است';
						break;
					case '31':
						$this->error = 'پذیرنده توسط سوییچ پشتیبانی نمی شود';
						break;
					case '33':
						$this->error = 'تاریخ انقضای کارت گذشته است';
						break;
					case '34':
						$this->error = 'کارت نامعتبر است';
						break;
					case '38':
						$this->error = 'تعداد دفعات ورود رمز عبور اشتباه، بیش از حد مجاز است';
						break;
					case '39':
						$this->error = 'کارت، حساب اعتباری ندارد';
						break;
					case '40':
						$this->error = 'عملیات درخواستی پشتیبانی نمی شود';
						break;
					case '41':
						$this->error = 'کارت مفقودی است، و قابلیت استفاده ندارد';
						break;
					case '42':
						$this->error = 'کارت شما، حساب متصل عمومی ندارد';
						break;
					case '43':
						$this->error = 'کارت مسروقه می باشد و امکان خرید با آن وجود ندارد';
						break;
					case '44':
						$this->error = 'کارت شما حساب سرمایه گذاری ندارد';
						break;
					case '51':
						$this->error = 'موجودی کافی نیست';
						break;
					case '52':
						$this->error = 'کارت شما حساب جاری ندارد';
						break;
					case '53':
						$this->error = 'کارت شما حساب قرض الحسنه ندارد';
						break;
					case '54':
						$this->error = 'کارت منقضی شده است';
						break;
					case '55':
						$this->error = 'رمز پین کارت اشتباه وارد شده است';
						break;
					case '56':
						$this->error = 'کارت نامعتبر است';
						break;
					case '57':
						$this->error = 'انجام تراکنش مربوطه برای دارنده ی کارت مجاز نمی باشد';
						break;
					case '58':
						$this->error = 'انجام تراکنش مربوطه برای پایانه مجاز نمی باشد';
						break;
					case '61':
						$this->error = 'مبلغ تراکنش بیش از حد مجاز است';
						break;
					case '62':
						$this->error = 'کارت محدود شده است';
						break;
					case '63':
						$this->error = 'تمهیدات امنیتی نقض گردیده است';
						break;
					case '65':
						$this->error = 'تعداد درخواست تراکنش بیش از حد مجاز است';
						break;
					case '68':
						$this->error = 'تراکنش در شبکه ی بانکی تایم اوت شده است';
						break;
					case '75':
						$this->error = 'تعداد دفعات ورود رمز غلط بیش از حد مجاز است';
						break;
					case '79':
						$this->error = 'مبلغ سند برگشتی از مبلغ تراکنش بیشتر است';
						break;
					case '84':
						$this->error = 'سیستم صادر کننده ی کارت بانکی در وضعیت عملیات نیست، لطفا بعدا امتحان کنید';
						break;
					case '90':
						$this->error = 'سامانه ی مقصد تراکنش در حال انجام عملیات مالی پایان روز می باشد، لطفا چند دقیقه بعد مجددا امتحان کنید';
						break;
					case '93':
						$this->error = 'امکان ثبت سند وجود ندارد، لطفا مجددا امتحان کنید';
						break;
					case '96':
						$this->error = 'خطای بانکی غیر منتظره';
						break;
					
				}
				$this->error.='<p>در صورتی که مبلغی از حساب شما کسر گردیده است، تا 24 ساعت آینده به حساب شما بازگردانی می شود، در                                                                                                غیر اینصورت، با پشتیبانی تماس                                                                                                                             حاصل نمایید.</p>';
			}else{
				$this->error.='<p>بانک کاربر را بدون در اختیار گذاشتن اطلاعات پرداخت، به سامانه بازگرداند، نتیجه ی پرداخت نامشخص</p>';
			}
			
		}
		
		
		final private function VerifyError( $code ) {
			switch ( (double) $code ) {
				case - 1:
					return 'خطا در پردازش اطلاعات ارسالی(مشکل در یکی از ورودی ها و ناموفق بودن فراخوانی متد برگشت تراکنش است)';
					break;
				case - 3:
					return 'ورودی ها حاوی کاراکترهای غیر مجاز است';
					break;
				case - 4:
					return 'مرچنت کد اشتباه است';
					break;
				case - 6:
					return 'سند قبلا برگشت کامل یافته یا زمان وارسی آن از 30 دقیقه گذشته است';
				case - 7:
					return 'رسید دیجیتالی تهی است';
					break;
				case - 8:
					return 'طول ورودی ها بیشتر از حد مجاز است';
				case - 9:
					return 'وجود کاراکترهای غیرمجاز در مبلغ بازگشتی';
					break;
				case - 10:
					return 'رسید دیجیتالی به صورت بیس 64 نیست';
					break;
				case - 11:
					return 'طول ورودی ها کمتر از حد مجاز است';
					break;
				case - 12:
					return 'مبلغ بازگشتی منفی است';
					break;
				case - 13:
					return 'مبلغ بازگشتی برای برگشت جزئی بیش از مبلغ برگشت نخورده ی رسید دیجیتالی است';
					break;
				case - 14:
					return 'تراکنش وجود ندارد';
					break;
				case - 15:
					return 'مبلغ اعشاری به صورت اعشاری داده شده است';
					break;
				case - 16:
					return 'خطای داخلی سیستم';
					break;
				case - 17:
					return 'برگشت زدن جزئی تراکنش مجاز نمی باشد';
					break;
				case - 18:
					return 'آدرس آی پی فروشنده غیر معتبر است';
					break;
				default:
					return 'چنانچه مبلغی از حساب شما برداشت شده است، تا ساعتی دیگر به حساب شما بازگردانی می شود.';
				break;
				
			}
			
			
		}
		
		/**
		 *
		 *
		 * @return array
		 * @throws \SoapFault
		 */
		final public function verify() {
			$soapclient = new SoapClient( 'https://verify.sep.ir/Payments/ReferencePayment.asmx?WSDL' );
			$res        = $soapclient->VerifyTransaction( $_POST['RefNum'] , $this->MID );
			
			if ( $res <= 0 ) {
				// Transaction Failed
				/* < ثبت خطا در بانک داده > */
				{
					$this->transaction->status      = Transactions::PAY_STATUS_FAILED;
					$this->transaction->description .='خطا در وریفای پرداخت در ساعت :'.Yii::$app->functions->convertdatetime(date( 'Y-m-d H:i:s')).' با متن خطای :'. $this->VerifyError( $res ).' -----<br> ';
					$this->transaction->save();
				}
				/* </ ثبت خطا در بانک داده > */
				
				
				return [ 'status' => 0 , 'message' => $this->VerifyError( $res ) ];
				
			} else {
				/* < ثبت خطا در بانک داده > */
				{
					$this->transaction->status      = Transactions::PAY_STATUS_DONE;
					$this->transaction->description .= 'تراکنش موفق در ساعت :'.Yii::$app->functions->convertdatetime(date('Y-m-d H:i:s')).' -----<br> ';
					$this->transaction->verify_at   = date( 'Y-m-d H:i:s' );
					$this->transaction->save();
				}
				/* </ ثبت خطا در بانک داده > */
				return [ 'status' => 1 , 'refID' => $_POST['RefNum'] ];
				
			}
		}
		
		final private function send_request( $url , array $data , $toObject = false ) {
			$fields = $this->create_data( $data );
			$ch     = curl_init();
			curl_setopt( $ch , CURLOPT_URL , "{$url}" );
			curl_setopt( $ch , CURLOPT_POSTFIELDS , "$fields" );
			curl_setopt( $ch , CURLOPT_SSL_VERIFYPEER , false );
			curl_setopt( $ch , CURLOPT_RETURNTRANSFER , true );
			$res = curl_exec( $ch );
			curl_close( $ch );
			
			return json_decode( $res , $toObject );
		}
		
		final private function create_data( array $data ) {
			$length = count( $data );
			$index  = 0;
			$string = "";
			foreach ( $data as $key => $value ) {
				$string .= $key . '=' . $value;
				if ( $index < $length - 1 ) {
					$index ++;
					$string .= '&';
				}
			}
			
			return $string;
		}
	}


